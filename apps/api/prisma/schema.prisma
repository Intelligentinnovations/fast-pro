generator kysely {
  provider = "prisma-kysely"
  output   = "../src/utils/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  email           String        @unique
  firstname       String
  lastname        String
  password        String
  status          UserStatus    @default(unverified)
  organizationId  String?
  Organization    Organization? @relation(fields: [organizationId], references: [id])
  vendorId        String?
  Vendor          Vendor?       @relation(fields: [vendorId], references: [id])
  departmentId    String?
  department      Department?   @relation(fields: [departmentId], references: [id])
  isDeleted       Boolean       @default(false)
  profileImage    String?
  title           String?
  biography       String?
  phoneNumber     String?
  address         String?
  UserRole        UserRole[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
  assignedTasks   Task[]        @relation("AssignedTasks")
  assignedTasksBy Task[]        @relation("AssignedTasksBy")
}

model Organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  companySize String?
  sector      String?
  logo        String?
  companyId   String?
  description String?
  websiteUrl  String?
  staff       User[]
  email       String?
  phoneNumber String?
  address     String?
  isDeleted   Boolean      @default(false)
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  Invite      Invite[]
  Departments Department[]
  Proposal    Proposal[]
  Task        Task[]
}

model Department {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  staff          User[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model Vendor {
  id                         String            @id @default(dbgenerated("gen_random_uuid()"))
  name                       String
  sector                     String?
  logo                       String?
  description                String?
  taxIdentificationNumber    String?
  certificateOfRegistration  String?
  businessRegistrationNumber String?
  email                      String?
  phoneNumber                String?
  address                    String?
  status                     VendorStatus      @default(inactive)
  createdAt                  DateTime          @default(now()) @map("created_at")
  updatedAt                  DateTime?         @updatedAt @map("updated_at")
  User                       User[]
  ProposalRequest            ProposalRequest[]
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()"))
  name        String           @unique
  userRoles   UserRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime?        @updatedAt @map("updated_at")
}

model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
}

model Invite {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  email          String
  roleId         String
  departmentId   String
  status         InviteStatus @default(pending)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model Proposal {
  id                  String            @id @default(dbgenerated("gen_random_uuid()"))
  organizationId      String
  Organization        Organization      @relation(fields: [organizationId], references: [id])
  categoryId          String
  Category            ProposalCategory  @relation(fields: [categoryId], references: [id])
  title               String
  dateRequired        DateTime
  budgetAmount        Decimal           @db.Decimal(10, 2)
  description         String
  termsAndCondition   String
  additionalDocument  String?
  evaluationCriteria  String[]
  eligibilityCriteria String[]
  status              ProposalStatus    @default(open)
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime?         @updatedAt @map("updated_at")
  ProposalRequest     ProposalRequest[]
}

model ProposalCategory {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  Proposal  Proposal[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
}

model ProposalRequest {
  id          String                @id @default(dbgenerated("gen_random_uuid()"))
  proposalId  String
  Proposal    Proposal              @relation(fields: [proposalId], references: [id])
  vendorId    String
  Vendor      Vendor                @relation(fields: [vendorId], references: [id])
  title       String
  summary     String
  attachments String[]
  status      ProposalRequestStatus @default(submitted)
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime?             @updatedAt @map("updated_at")
}

model Task {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  assigneeId     String
  Assignee       User          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assignerId     String
  Assigner       User          @relation("AssignedTasksBy", fields: [assignerId], references: [id])
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  title          String
  priority       String
  status         TaskStatus    @default(todo)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
}

model UserRole {
  userId    String
  roleId    String
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
}

enum UserStatus {
  unverified
  active
  deactivated
  deleted
}

enum VendorStatus {
  inactive
  active
  deactivated
}

enum InviteStatus {
  pending
  used
}

enum ProposalStatus {
  open
  closed
}

enum ProposalRequestStatus {
  submitted
  accepted
  rejected
}

enum TaskStatus {
  todo
  inProgres
  completed
}
