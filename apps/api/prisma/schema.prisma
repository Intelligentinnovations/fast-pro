generator kysely {
  provider = "prisma-kysely"
  output   = "../src/utils/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String        @id @default(dbgenerated("gen_random_uuid()"))
  email           String        @unique
  firstname       String
  lastname        String
  password        String
  status          UserStatus    @default(unverified)
  organizationId  String?
  Organization    Organization? @relation(fields: [organizationId], references: [id])
  vendorId        String?
  Vendor          Vendor?       @relation(fields: [vendorId], references: [id])
  departmentId    String?
  department      Department?   @relation(fields: [departmentId], references: [id])
  isDeleted       Boolean       @default(false)
  profileImage    String?
  title           String?
  biography       String?
  phoneNumber     String?
  address         String?
  UserRole        UserRole[]
  assignedTasks   Task[]        @relation("AssignedTasks")
  assignedTasksBy Task[]        @relation("AssignedTasksBy")
  CartItem        CartItem[]
  Procurement     Procurement[]
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime?     @updatedAt @map("updated_at")
}

model Organization {
  id          String        @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  companySize String?
  sector      String?
  logo        String?
  companyId   String?
  description String?
  websiteUrl  String?
  staff       User[]
  email       String?
  phoneNumber String?
  address     String?
  isDeleted   Boolean       @default(false)
  Invite      Invite[]
  Departments Department[]
  Proposal    Proposal[]
  Task        Task[]
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime?     @updatedAt @map("updated_at")
  Procurement Procurement[]
}

model Department {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  staff          User[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model Vendor {
  id                         String            @id @default(dbgenerated("gen_random_uuid()"))
  name                       String
  sector                     String?
  logo                       String?
  description                String?
  taxIdentificationNumber    String?
  certificateOfRegistration  String?
  businessRegistrationNumber String?
  email                      String?
  phoneNumber                String?
  address                    String?
  status                     VendorStatus      @default(inactive)
  User                       User[]
  ProposalRequests           ProposalRequest[]
  Products                   Product[]
  createdAt                  DateTime          @default(now()) @map("created_at")
  updatedAt                  DateTime?         @updatedAt @map("updated_at")
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()"))
  name        String           @unique
  userRoles   UserRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime?        @updatedAt @map("updated_at")
}

model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
}

model Invite {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  email          String
  roleId         String
  departmentId   String
  status         InviteStatus @default(pending)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model Proposal {
  id                  String            @id @default(dbgenerated("gen_random_uuid()"))
  organizationId      String
  Organization        Organization      @relation(fields: [organizationId], references: [id])
  categoryId          String
  Category            ProposalCategory  @relation(fields: [categoryId], references: [id])
  title               String
  dateRequired        DateTime
  budgetAmount        Decimal           @db.Decimal(10, 2)
  description         String
  termsAndCondition   String
  additionalDocument  String?
  evaluationCriteria  String[]
  eligibilityCriteria String[]
  status              ProposalStatus    @default(open)
  ProposalRequest     ProposalRequest[]
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime?         @updatedAt @map("updated_at")
}

model ProposalCategory {
  id        String     @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  Proposal  Proposal[]
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime?  @updatedAt @map("updated_at")
}

model ProposalRequest {
  id          String                @id @default(dbgenerated("gen_random_uuid()"))
  proposalId  String
  Proposal    Proposal              @relation(fields: [proposalId], references: [id])
  vendorId    String
  Vendor      Vendor                @relation(fields: [vendorId], references: [id])
  title       String
  summary     String
  attachments String[]
  status      ProposalRequestStatus @default(submitted)
  createdAt   DateTime              @default(now()) @map("created_at")
  updatedAt   DateTime?             @updatedAt @map("updated_at")
}

model Task {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  assigneeId     String
  Assignee       User          @relation("AssignedTasks", fields: [assigneeId], references: [id])
  assignerId     String
  Assigner       User          @relation("AssignedTasksBy", fields: [assignerId], references: [id])
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  title          String
  priority       String
  status         TaskStatus    @default(todo)
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
}

model Product {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()"))
  categoryId           String
  Category             ProductCategory        @relation(fields: [categoryId], references: [id])
  vendorId             String
  Vendor               Vendor                 @relation(fields: [vendorId], references: [id])
  name                 String
  basePrice            Decimal                @db.Decimal(10, 2)
  quantity             Int                    @default(0)
  description          String
  ProductImage         ProductImage[]
  ProductVariant       ProductVariant[]
  ProductSpecification ProductSpecification[]
  CartItem             CartItem[]
  ProcurementItem      ProcurementItem[]
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime?              @updatedAt @map("updated_at")
}

model ProductVariant {
  id              String            @id @default(dbgenerated("gen_random_uuid()"))
  product         Product           @relation(fields: [productId], references: [id])
  productId       String
  name            String
  quantity        Int
  price           Decimal           @db.Decimal(10, 2)
  CartItem        CartItem[]
  ProcurementItem ProcurementItem[]
  createdAt       DateTime          @default(now()) @map("created_at")
  updatedAt       DateTime?         @updatedAt @map("updated_at")
}

model ProductImage {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  imageUrl  String
  isPrimary Boolean   @default(false)
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
}

model ProductCategory {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  name      String
  Product   Product[]
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
}

model ProductSpecification {
  id        String    @id @default(dbgenerated("gen_random_uuid()"))
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  title     String
  value     String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
}

model CartItem {
  id        String          @id @default(dbgenerated("gen_random_uuid()"))
  userId    String
  User      User            @relation(fields: [userId], references: [id])
  productId String
  variantId String?
  quantity  Int
  Product   Product         @relation(fields: [productId], references: [id])
  Variant   ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt DateTime        @default(now()) @map("created_at")
  updatedAt DateTime?       @updatedAt @map("updated_at")
}

model Procurement {
  id             String            @id @default(dbgenerated("gen_random_uuid()"))
  userId         String
  organizationId String
  itemDetails    String
  amount         Decimal           @db.Decimal(10, 2)
  status         ProcurementStatus @default(created)
  requiredDate   DateTime
  justification  String
  paymentTerms   String
  documents      String[]
  items          ProcurementItem[]
  Requester      User              @relation(fields: [userId], references: [id])
  Organization   Organization      @relation(fields: [organizationId], references: [id])
  createdAt      DateTime          @default(now()) @map("created_at")
  updatedAt      DateTime?         @updatedAt @map("updated_at")
}

model ProcurementItem {
  id            String          @id @default(dbgenerated("gen_random_uuid()"))
  procurementId String
  productId     String
  variantId     String?
  quantity      Int
  unitPrice     Decimal         @db.Decimal(10, 2)
  totalPrice    Decimal         @db.Decimal(10, 2)
  Procurement   Procurement     @relation(fields: [procurementId], references: [id])
  Product       Product         @relation(fields: [productId], references: [id])
  Variant       ProductVariant? @relation(fields: [variantId], references: [id])
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime?       @updatedAt @map("updated_at")
}

model UserRole {
  userId    String
  roleId    String
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
}

enum UserStatus {
  unverified
  active
  deactivated
  deleted
}

enum VendorStatus {
  inactive
  active
  deactivated
}

enum InviteStatus {
  pending
  used
}

enum ProposalStatus {
  open
  closed
}

enum ProposalRequestStatus {
  submitted
  accepted
  rejected
}

enum TaskStatus {
  todo
  inProgres
  completed
}

enum ProcurementStatus {
  created
  pending
  approved
  declined
}
