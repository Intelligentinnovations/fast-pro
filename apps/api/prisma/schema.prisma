generator kysely {
  provider = "prisma-kysely"
  output   = "../src/utils/types"
  fileName = "database.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String        @id @default(dbgenerated("gen_random_uuid()"))
  email          String        @unique
  firstname      String
  lastname       String
  password       String
  status         UserStatus    @default(UNVERIFIED)
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  vendorId       String?
  Vendor         Vendor?       @relation(fields: [vendorId], references: [id])
  departmentId   String?
  department     Department?   @relation(fields: [departmentId], references: [id])
  isDeleted      Boolean       @default(false)
  profileImage   String?
  title          String?
  biography      String?
  phoneNumber    String?
  address        String?
  UserRole       UserRole[]
  createdAt      DateTime      @default(now()) @map("created_at")
  updatedAt      DateTime?     @updatedAt @map("updated_at")
}

model Organization {
  id          String       @id @default(dbgenerated("gen_random_uuid()"))
  name        String
  companySize String
  sector      String
  logo        String?
  companyId   String?
  description String?
  websiteUrl  String?
  staff       User[]
  email       String?
  phoneNumber String?
  address     String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime?    @updatedAt @map("updated_at")
  Invite      Invite[]
  Departments Department[]
}

model Department {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  name           String
  staff          User[]
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model Vendor {
  id                         String       @id @default(dbgenerated("gen_random_uuid()"))
  name                       String
  sector                     String?
  logo                       String?
  description                String?
  taxIdentificationNumber    String?
  certificateOfRegistration  String?
  businessRegistrationNumber String?
  email                      String?
  phoneNumber                String?
  address                    String?
  status                     VendorStatus @default(INACTIVE)
  createdAt                  DateTime     @default(now()) @map("created_at")
  updatedAt                  DateTime?    @updatedAt @map("updated_at")
  User                       User[]
}

model Role {
  id          String           @id @default(dbgenerated("gen_random_uuid()"))
  name        String           @unique
  userRoles   UserRole[]
  permissions RolePermission[]
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime?        @updatedAt @map("updated_at")
}

model Permission {
  id              String           @id @default(dbgenerated("gen_random_uuid()"))
  name            String
  description     String
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now()) @map("created_at")
  updatedAt       DateTime?        @updatedAt @map("updated_at")
}

model Invite {
  id             String       @id @default(dbgenerated("gen_random_uuid()"))
  organizationId String
  Organization   Organization @relation(fields: [organizationId], references: [id])
  email          String
  roleId         String
  departmentId   String
  status         InviteStatus @default(PENDING)
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime?    @updatedAt @map("updated_at")
}

model UserRole {
  userId    String
  roleId    String
  user      User      @relation(fields: [userId], references: [id])
  role      Role      @relation(fields: [roleId], references: [id])
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String
  permissionId String
  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime?  @updatedAt @map("updated_at")

  @@id([roleId, permissionId])
}

enum UserStatus {
  UNVERIFIED
  ACTIVE
  DEACTIVATED
  DELETED
}

enum VendorStatus {
  INACTIVE
  ACTIVE
  DEACTIVATED
}

enum InviteStatus {
  PENDING
  USED
}
